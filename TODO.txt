1) Make endgame highlighting that only highlights pieces if they

a) threaten the mated king or any of its escape squares
b) pin a loser piece to the king AND (removing this piece (the pinner) would cause the position to not be checkmate) AND the
only legal moves the loser would have if the pinner was removed involve moving the pinned piece.

2 flaws. 1 in isPinnedBy - could not attack before. The other in necessaryToMate with mated vs mating color 

Ways to get out of check
1) Run away.
2) Capture checking piece.
3) Block path of checking piece.

Ways a piece can be necessary to checkmate:
1) attacking the king
2) attacking the king's escape squares
3) Pinning a piece to the king that could otherwise have helped it escape checkmate
4) Blocking the path of a piece that could otherwise have helped the king escape checkmate

In our endgame highlighting, we're only interested in conditions 1-3 above.

So, in toroidal.js, add a function called necessaryToMate, which looks at a checkmated position,
and returns a list of all the squares that contain pieces that were necessary to mate (i.e. the
position would no longer be a mate without that piece.) Then create another function that
filters for conditions 1 - 3 above. (will need intermediate function pin and
mustMove -> takes in a piece and a pos and sees if all your legal moves involve moving that piece.)


2) Add a way to scroll through the toroidal board, so users realize its toroidal ness
Will need to mess with build board and draw position in chessboard-0.3.0.js
